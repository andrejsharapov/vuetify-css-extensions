@mixin grid($breakpoint) {
  @if map-has-key($grid-breakpoints, $breakpoint) {
    @media (min-width: #{map-get($grid-breakpoints, $breakpoint)}) {
      @if $breakpoint != xs {
        .d-#{$breakpoint}-grid {
          display: grid !important;
        }

        .d-#{$breakpoint}-inline-grid {
          display: inline-grid !important;
        }

        @for $gtc from 1 through 12 {
          .grid-cols-#{$breakpoint}-#{$gtc} {
            grid-template-columns: repeat(#{$gtc}, minmax(0, 1fr));
          }
        }

        @for $gc from 1 through 12 {
          .col-span-#{$breakpoint}-#{$gc} {
            grid-column: span #{$gc} / span #{$gc};
          }
        }

        @for $gcs from 1 through 13 {
          .col-start-#{$breakpoint}-#{$gcs} {
            grid-column-start: #{$gcs};
          }
        }

        @for $gce from 1 through 13 {
          .col-end-#{$breakpoint}-#{$gce} {
            grid-column-end: #{$gce};
          }
        }

        @for $gtr from 1 through 6 {
          .grid-rows-#{$breakpoint}-#{$gtr} {
            grid-template-rows: repeat(#{$gtr}, minmax(0, 1fr));
          }
        }

        @for $gr from 1 through 6 {
          .row-span-#{$breakpoint}-#{$gr} {
            grid-row: span #{$gr} / span #{$gr};
          }
        }

        @for $grs from 1 through 7 {
          .row-start-#{$breakpoint}-#{$grs} {
            grid-row-start: #{$grs};
          }
        }

        @for $gre from 1 through 7 {
          .row-end-#{$breakpoint}-#{$gre} {
            grid-row-end: #{$gre};
          }
        }

        @each $g in $gap {
          .gap-#{$breakpoint}-#{$g} {
            gap: calc(#{$g} * 0.25rem);
          }
        }

        @each $cg in $gap {
          .gap-x-#{$breakpoint}-#{$cg} {
            column-gap: calc(#{$cg} * 0.25rem);
          }
        }

        @each $rg in $gap {
          .gap-y-#{$breakpoint}-#{$rg} {
            row-gap: calc(#{$rg} * 0.25rem);
          }
        }
      }
    }
  }
}

/**
 *
 * Display Grid
 *
 */

.d-grid {
  display: grid;
}

.d-inline-grid {
  display: inline-grid;
}

.place-items-center {
  place-items: center;
}

/**
 *
 * Grid Template Columns
 *
 */

.grid-cols-0 {
  grid-template-columns: none;
}

@for $gtc from 1 through 12 {
  .grid-cols-#{$gtc} {
    grid-template-columns: repeat(#{$gtc}, minmax(0, 1fr));
  }
}

/**
 *
 * Grid Column
 *
 */

.col-auto {
  grid-column: auto;
}

@for $gc from 1 through 12 {
  .col-span-#{$gc} {
    grid-column: span #{$gc} / span #{$gc};
  }
}

/**
 *
 * Grid Column Start
 *
 */

.col-start-auto {
  grid-column-start: auto;
}

@for $gcs from 1 through 13 {
  .col-start-#{$gcs} {
    grid-column-start: #{$gcs};
  }
}

/**
 *
 * Grid Column End
 *
 */

.col-end-auto {
  grid-column-end: auto;
}

@for $gce from 1 through 13 {
  .col-end-#{$gce} {
    grid-column-end: #{$gce};
  }
}

/**
 *
 * Grid Template Rows
 *
 */

.grid-rows-0 {
  grid-template-rows: none;
}

@for $gtr from 1 through 6 {
  .grid-rows-#{$gtr} {
    grid-template-rows: repeat(#{$gtr}, minmax(0, 1fr));
  }
}

/**
 *
 * Grid Row Span
 *
 */

.row-auto {
  grid-row: auto;
}

@for $gr from 1 through 6 {
  .row-span-#{$gr} {
    grid-row: span #{$gr} / span #{$gr};
  }
}

/**
 *
 * Grid Row Start
 *
 */

.row-start-auto {
  grid-row-start: auto;
}

@for $grs from 1 through 7 {
  .row-start-#{$grs} {
    grid-row-start: #{$grs};
  }
}

/**
 *
 * Grid Row End
 *
 */

.row-end-auto {
  grid-row-end: auto;
}

@for $gre from 1 through 7 {
  .row-end-#{$gre} {
    grid-row-end: #{$gre};
  }
}

/**
 *
 * Grid Auto Columns
 *
 */

.auto-cols-auto {
  grid-auto-columns: auto;
}

.auto-cols-min {
  grid-auto-columns: min-content;
}

.auto-cols-max {
  grid-auto-columns: max-content;
}

.auto-cols-fr {
  grid-auto-columns: minmax(0, 1fr);
}

/**
 *
 * Grid Auto Rows
 *
 */

.auto-rows-auto {
  grid-auto-rows: auto;
}

.auto-rows-min {
  grid-auto-rows: min-content;
}

.auto-rows-max {
  grid-auto-rows: max-content;
}

.auto-rows-fr {
  grid-auto-rows: minmax(0, 1fr);
}

/**
 *
 * Grid Auto Flow
 *
 */

.grid-flow-col {
  grid-auto-flow: column;
}

.grid-flow-col-dense {
  grid-auto-flow: column dense;
}

.grid-flow-row {
  grid-auto-flow: row;
}

.grid-flow-row-dense {
  grid-auto-flow: row dense;
}

/**
 *
 * Grid Gap
 *
 */

.gap-0 {
  gap: 0px;
}

.gap-x-0 {
  column-gap: 0px;
}

.gap-y-0 {
  row-gap: 0px;
}

@each $g in $gap {
  .gap-#{$g} {
    gap: calc(#{$g} * 0.25rem);
  }
}

@each $cg in $gap {
  .gap-x-#{$cg} {
    column-gap: calc(#{$cg} * 0.25rem);
  }
}

@each $rg in $gap {
  .gap-y-#{$rg} {
    row-gap: calc(#{$rg} * 0.25rem);
  }
}

.v-application {
  @include grid(sm);
  @include grid(md);
  @include grid(lg);
  @include grid(xl);
}
